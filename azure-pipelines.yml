# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- main

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: 'BuildAndDeploy'
  displayName: 'Build and deploy'
  jobs:
  - job: 'Build'
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: CopyFiles@2
      inputs:
        SourceFolder: $(Agent.BuildDirectory)
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    # TODO: Use PublishPipelineArtifacts?
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Aurora'
        publishLocation: 'Container'

  - deployment: 'DownloadToVM'
    displayName: 'Download to VM'
    workspace:
      clean: all
    environment: 'Aurora.auroravm'
    dependsOn: 'Build'
    # TODO: No good way to run the server after the build is done.
    strategy:
     runOnce:
       deploy:
         steps:
          # TODO: Use DownloadPipelineArtifacts?
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'Aurora'
              downloadPath: '$(Agent.BuildDirectory)'

          # TODO: There doesn't seem to be a good way to launch the server and not hang the build.
          #- task: BatchScript@1
          #  inputs:
          #    filename: '$(Agent.BuildDirectory)/Aurora/s/bin/release/net6.0-windows/Aurora.exe'
          #    arguments: '$(Agent.BuildDirectory)/Aurora/s/Borealis.db'
